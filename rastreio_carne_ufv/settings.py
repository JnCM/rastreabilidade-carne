"""
Django settings for rastreio_carne_ufv project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os, json
from environs import Env
from web3 import Web3

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = Env()
env.read_env(os.path.join(BASE_DIR, '.env'), recurse=False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# DEBUG = True

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ["rastreio-carne.herokuapp.com", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'site_app',
    'django_celery_results'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rastreio_carne_ufv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR + '/site_app/paginas', 'templates'),
            os.path.join(BASE_DIR + '/site_app/paginas', 'html')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

STATICFILES_DIRS = (
    BASE_DIR + '/site_app/paginas/templates',
    #    os.path.join(ROOT_DIR, 'static'),    
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

WSGI_APPLICATION = 'rastreio_carne_ufv.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Nome do banco de dados do ITU e Temperatura
NAME_DB_ITUTEMP = env.str("NAME_DB_ITUTEMP")
# Usuario do MySQL
USER_DB_ITUTEMP = env.str("USER_DB_ITUTEMP")
# Senha do usuario MySQL
PASSWORD_DB_ITUTEMP = env.str("PASSWORD_DB_ITUTEMP")
# Localizacao do banco de dados
HOST_DB_ITUTEMP = env.str("HOST_DB_ITUTEMP")


# Nome do banco de dados
NAME_DB_DEFAULT = env.str("NAME_DB_DEFAULT")
# Usuario do MySQL
USER_DB_DEFAULT = env.str("USER_DB_DEFAULT")
# Senha do usuario MySQL
PASSWORD_DB_DEFAULT = env.str("PASSWORD_DB_DEFAULT")
# Localizacao do banco de dados
HOST_DB_DEFAULT = env.str("HOST_DB_DEFAULT")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': NAME_DB_DEFAULT,
        'USER': USER_DB_DEFAULT,
        'PASSWORD': PASSWORD_DB_DEFAULT,
        'HOST': HOST_DB_DEFAULT,
        'PORT': ''
    }
}

DATABASE_OPTIONS = {
    "charset": "utf8",
    "init_command": "SET storage_engine=InnoDB",
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'pt-BR'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Par창metros blockchain
PROVIDER = env.str("PROVIDER")
BLOCKCHAIN_ACCOUNT = env.str("BLOCKCHAIN_ACCOUNT")
PK_ACCOUNT = env.str("PK_ACCOUNT")
CONTRACT_ABI = env.str("CONTRACT_ABI")
HASH_CONTRACT = env.str("HASH_CONTRACT")

def CONECTAR_CONTRATO():
    try:
        #Conex찾o com provider
        web3 = Web3(Web3.HTTPProvider(PROVIDER))
        if not(web3.isConnected()):
            print("Erro de conex찾o")
            return None, None
        
        #Dados do contrato storage.sol     
        abi = json.loads(CONTRACT_ABI)
        tx_hash = HASH_CONTRACT
        tx_receipt = web3.eth.getTransactionReceipt(tx_hash)
        contratoDados = web3.eth.contract(address=tx_receipt.contractAddress, abi=abi)
        #print("Conectado!")
        return web3, contratoDados
    except:
        print("Erro interno")
        return None, None

W3_CONNECTION, CONTRACT = CONECTAR_CONTRATO()

# Celery Par창metros
CELERY_BROKER_URL = env.str("REDIS_URL")
CELERY_RESULT_BACKEND = 'django-db'
